{"ast":null,"code":"import axios from 'axios';\nconst PAYSTACK_SECRET_KEY = process.env.REACT_APP_PAYSTACK_SECRET_KEY;\nexport const initiatePayment = async paymentData => {\n  try {\n    const response = await axios.get('https://x8ki-letl-twmt.n7.xano.io/api:2T4UiE5R/paystack_charge', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      params: {\n        email: paymentData.email,\n        provider: paymentData.provider,\n        phone: paymentData.phone\n      }\n    });\n    if (response.data && response.data.response && response.data.response.result && response.data.response.result.data) {\n      const paymentResult = response.data.response.result.data;\n      return {\n        reference: paymentResult.reference,\n        status: paymentResult.status,\n        displayText: paymentResult.display_text\n      };\n    } else {\n      throw new Error('Invalid payment response structure');\n    }\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Payment initiation failed');\n  }\n};\nexport const submitOtp = async (otp, reference, retryCount = 0) => {\n  try {\n    const response = await axios.get('https://x8ki-letl-twmt.n7.xano.io/api:2T4UiE5R/charge_otp', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      params: {\n        otp,\n        reference\n      }\n    });\n    if (response.data && response.data.response && response.data.response.result.status) {\n      return response.data.response.result.status;\n    } else {\n      throw new Error('Invalid OTP response structure');\n    }\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    if (retryCount < 3) {\n      // Maximum 3 retries\n      // Wait for 10 seconds before retrying\n      await new Promise(resolve => setTimeout(resolve, 10000));\n      return submitOtp(otp, reference, retryCount + 1);\n    }\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'OTP verification failed after retries');\n  }\n};\nexport const verifyPayment = async reference => {\n  try {\n    console.log('Verifying payment with reference:', reference);\n    const response = await axios.get('https://x8ki-letl-twmt.n7.xano.io/api:2T4UiE5R/verify', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      params: {\n        reference\n      }\n    });\n    return response.data.response.result.status;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Payment verification failed');\n  }\n};","map":{"version":3,"names":["axios","PAYSTACK_SECRET_KEY","process","env","REACT_APP_PAYSTACK_SECRET_KEY","initiatePayment","paymentData","response","get","headers","params","email","provider","phone","data","result","paymentResult","reference","status","displayText","display_text","Error","error","_error$response","_error$response$data","message","submitOtp","otp","retryCount","_error$response2","_error$response2$data","Promise","resolve","setTimeout","verifyPayment","console","log","_error$response3","_error$response3$data"],"sources":["/Users/dibelaba/Documents/GitHub/KBF/src/services/payment.js"],"sourcesContent":["import axios from 'axios';\n\nconst PAYSTACK_SECRET_KEY = process.env.REACT_APP_PAYSTACK_SECRET_KEY;\n\nexport const initiatePayment = async (paymentData) => {\n  try {\n    const response = await axios.get(\n      'https://x8ki-letl-twmt.n7.xano.io/api:2T4UiE5R/paystack_charge',\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        params: {\n          email: paymentData.email,\n          provider: paymentData.provider,\n          phone: paymentData.phone\n        }\n      }\n    );\n\n    if (response.data && response.data.response && response.data.response.result && response.data.response.result.data) {\n      const paymentResult = response.data.response.result.data;\n      return {\n        reference: paymentResult.reference,\n        status: paymentResult.status,\n        displayText: paymentResult.display_text\n      };\n    } else {\n      throw new Error('Invalid payment response structure');\n    }\n  } catch (error) {\n    throw new Error(error.response?.data?.message || 'Payment initiation failed');\n  }\n};\n\nexport const submitOtp = async (otp, reference, retryCount = 0) => {\n  try {\n    const response = await axios.get(\n      'https://x8ki-letl-twmt.n7.xano.io/api:2T4UiE5R/charge_otp',\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        params: {\n          otp,\n          reference\n        }\n      }\n    );\n\n    if (response.data && response.data.response && response.data.response.result.status) {\n      return response.data.response.result.status;\n    } else {\n      throw new Error('Invalid OTP response structure');\n    }\n  } catch (error) {\n    if (retryCount < 3) { // Maximum 3 retries\n      // Wait for 10 seconds before retrying\n      await new Promise(resolve => setTimeout(resolve, 10000));\n      return submitOtp(otp, reference, retryCount + 1);\n    }\n    throw new Error(error.response?.data?.message || 'OTP verification failed after retries');\n  }\n};\n\nexport const verifyPayment = async (reference) => {\n  try {\n    console.log('Verifying payment with reference:', reference);\n    \n    const response = await axios.get(\n      'https://x8ki-letl-twmt.n7.xano.io/api:2T4UiE5R/verify',\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        params: {\n          reference\n        }\n      }\n    );\n    return response.data.response.result.status;\n  } catch (error) {\n    throw new Error(error.response?.data?.message || 'Payment verification failed');\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}